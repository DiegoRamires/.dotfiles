#!/bin/bash

alias update_hosts='dscacheutil -flushcache'

source ~/.dotfiles/bash/git-completion.bash

alias install-dotfiles='update_dotfiles'
alias ubp='update_dotfiles'
alias dotfiles='cd ~/.dotfiles'
alias vimdotfiles='vim ~/.dotfiles/bash/'

# Mac
mac_notify="reattach-to-user-namespace terminal-notifier -message"

# General
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip"
alias classicfmpostcode="echo N9 9LA"
function boxen-brew-install(){ brew boxen-install $*; }
function boxen-brew-uninstall(){ brew boxen-uninstall $*; }

# Ride
  function rfc-start() {
    if [ -z "$*" ]; then
      echo "Specify a name for the RFC file";
      return
    fi
    cd ~/src/engineering/
    git checkout -b $1
    cp rfcs/0000-template.md rfcs/00xx-$1.md
    open rfcs/00xx-$1.md
  }

  function rfc-finish() {
    git add .
    git commit
    gfacepunch
    hub pull-request -o
  }

  function rfc-amend() {
    git add .
    git commit --amend --no-edit
    gfacepunch
  }

#Heroku
alias herokuwork="heroku accounts:set work"
alias herokupersonal="heroku accounts:set personal"
alias herokuhome="herokupersonal"

# System
alias ls='ls -G'
alias ..='cd ..'
alias count_files='find ./ -maxdepth 1 -type d | while read -r dir; do printf "%s:\t" "$dir"; find "$dir" | wc -l; done'
function replaceFiles() {
  find . -name "$1" -print0 | xargs -0 sed -i "" -e "s/$2/$3/g"
}

# Unix Processes
alias tu='top -o cpu'
alias tm='top -o cpu'

# Output helpers
function pjson(){
  cat $* | python -m json.tool
}

# JS helpers
alias nombom='npm cache clear && bower cache clean && rm -rf node_modules bower_components && npm install && bower install'

alias fix_pow='sudo pfctl -f /etc/pf.conf; sudo pfctl -e'
function response_size() {
  curl -so /dev/null -w '%{size_download}' $*
}

# Rails helpers
#
# Redirects port 80 on a Mac to 3000, allowing to run the server without root
alias railson80='sudo ipfw add 100 fwd 127.0.0.1,3000 tcp from any to any 80 in'

# Removes the redirection from port 80 to 3000
alias railsnoton80='sudo ipfw flush'
alias last_migration='vim $(ls db/migrate/* | tail -n1)'
alias dbmigrate='echo "Running rake db:migrate db:test:prepare" && be rake db:migrate db:test:prepare'
alias dbrollback='echo "Running rake db:rollback db:test:prepare" && be rake db:rollback db:test:prepare'
alias dbmigratestatus='echo "Running rake db:migrate:status" && be rake db:migrate:status'
alias deploystaging='echo "Running be cap staging deploy:migrations" && be cap staging deploy:migrations'
alias deployprod="echo \"Running be 'cap production deploy:migrations'\" && be cap production deploy:migrations"
alias pushdeployprod="echo \"git pushing & Running 'be cap production deploy:migrations'\" && gpush && be cap production deploy:migrations"

alias startredis="redis-server /usr/local/etc/redis.conf & disown"
alias rabbitmq_stop="sudo rabbitmqctl stop_app"
alias rabbitmq_reset="sudo rabbitmqctl reset"
alias rabbitmq_start="sudo rabbitmqctl start_app"
alias rabbitmq_start_server="sudo service rabbitmq-server start"

# Git

# creates pull request and opens it in the browser
alias pr='gpush && hub pull-request -o'

alias master='git checkout master'
alias dev='git checkout develop'
alias develop='git checkout develop'
alias mgpr='git checkout master && gpr'
alias dgpr='git checkout develop && gpr'
alias g='git status -sb'
alias gst='git status'
alias ga='git add . --all && git status'
alias gb='git branch'
alias gd='git diff'
alias gdc='git diff --cached'
alias glog='git log'
alias gl="git log --pretty=format:'%C(yellow)%h %C(blue)<<%an>> %C(black)%ad%C(yellow)%d%Creset %s %Creset' --date=short --abbrev-commit | sed -e 's/<<\([A-Za-z]\).* \([A-Za-z]\).*>>/<\1\2>/' | sed ''/Merge/s//`printf "\033[31mMerge\033[0m"`/'' | sed ''/Revert/s//`printf "\033[31mRevert\033[0m"`/'' | less -rX"
alias gamend='git commit --amend'
alias gamendc='git commit --amend --no-edit'
alias gdm='git diff master'
alias gdd='git diff develop'
#alias gdelete_merged_branches='git branch --merged | grep -v "\*" | xargs -n 1 git branch -d'
alias gdelete_merged_branches="git checkout master; git branch --merged | egrep -v ^master$ | sed 's/^[ *]*//' | sed 's/^/git branch -D /' | bash"
alias gshow_unmerged_branches='git branch --no-merged'

	# Commit pending changes and quote all args as message
	function gc(){ echo "Do you mean gco?"; }
	function gco(){
    if [ ! -z "$*" ]; then
      git commit -v -m "$*";
    else
      git commit;
    fi
  }
	function gch(){ git checkout $*; }

  # rmr = Rebase Master Rebase
	function rmr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

    echo Checking out master, rebasing and returning to $CURRENT_BRANCH...
		git checkout master
    git pull --rebase origin master
		git checkout $CURRENT_BRANCH
    git rebase master
	}

  # rmd = Rebase Develop Rebase
	function rdr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

    echo 1. Checkout develop branch
    echo 2. Rebase: git pull --rebase origin develop
    echo 3. Checkout $CURRENT_BRANCH
    echo 4. Rebase on top of develop
		git checkout develop
    git pull --rebase origin develop
		git checkout $CURRENT_BRANCH
    git rebase master
	}

	function gfacepunch(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Face punching to origin $CURRENT_BRANCH...
		git push --force origin $CURRENT_BRANCH
	}

	function gpush(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pushing to origin $CURRENT_BRANCH...
		git push origin $CURRENT_BRANCH
	}

	function gpr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pulling origin/$CURRENT_BRANCH, rebasing on it and fetching origin...
		git pull --rebase origin $CURRENT_BRANCH && git fetch origin
	}

	function gpul(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pulling from origin $CURRENT_BRANCH...
		git pull origin $CURRENT_BRANCH
	}

	alias gpull=gpul

# Development
function spn(){ time rspec $*; }
function be(){ time bundle exec $*; }
function t(){
  SPEC_PATH='spec/'
  if [ ! -z "$*" ]; then
    SPEC_PATH="$*"
  fi
  echo "Running all tests in $SPEC_PATH" && time bundle exec rspec $SPEC_PATH --color 2> >(grep -v CoreText 1>&2);
}
function tf(){
  SPEC_PATH='spec/'
  if [ ! -z "$*" ]; then
    SPEC_PATH="$*"
  fi
  echo "Running all tests in $SPEC_PATH and failing-fast" && time bundle exec rspec $SPEC_PATH --fail-fast --color 2> >(grep -v CoreText 1>&2);
}
function tsay(){
  echo 'Running all tests in spec/ and then shouting at you' && time bundle exec rspec spec/ $* --color && say 'SPECS ARE DONE! GET BACK HERE!';
}

function tn() {
  echo 'Running tests then notifying'
  time bundle exec rspec spec/ $* --color
  if [ $? == 0 ]; then
    mac_notify 'Specs are passing.'
  else
    mac_notify 'Some specs failed.'
  fi
}
alias tdiff="git diff --name-only spec/**/*_spec.rb | xargs bin/rspec"

# checks the complexity of a file in HEAD~1
function floggg(){
  echo "Before:" && git show HEAD:$* | cat > ~/.flog_tmp && flog ~/.flog_tmp | grep "flog total" && rm ~/.flog_tmp;
  echo "";
  echo "After:" && flog $* | grep "flog total";
}

# Zeus
  alias zst='zeus start'
  alias zsts='(tmux send-keys -t 8 "sleep 1 && zse" C-m &) && zst'
  alias zse='zeus server'
  alias zco='zeus console'
  function zra(){ zeus rake $*; }
  alias zro='zeus rake routes'
  alias zmi='zeus rake db:migrate db:test:prepare'
  alias zer='time zeus rspec spec/'
  function zrs(){ time zeus rspec $*; }
  alias zspl='time zeus rspec spec/lib/'
  alias zspc='time zeus rspec spec/controllers/'
  alias zspm='time zeus rspec spec/models/'
  alias zspa='time zeus rspec spec/acceptance/'
  alias zspr='time zeus rspec spec/request/'

# Spring gem
  alias sr='spring rake test'
  alias sse='spring rails server'
  alias sco='spring rails console'
  function sra(){ spring rake $*; }
  alias sro='spring rake routes'
  alias smi='spring rake db:migrate db:test:prepare'
  alias ser='time spring rspec spec/'

# Tmux
#
# execute_in_all_panes "echo OH HAI"
function tmuxa(){ tmux attach -t $*; }
function tmuxn(){ tmux new-session -s $*; }
function tmuxk(){ tmux kill-session -t $*; }


# General commands
function grepp(){
  grep -Rni --exclude=".//db/data*" --exclude=".//tmp*" --exclude=".//vendor*" --exclude=".//coverage*" --exclude=".//log*" --exclude=".//tag*" --exclude=".//spec*/vcr*" --exclude=".//spec*/cassett*" --exclude=".//public/*.js*" --exclude=".//.*" --exclude="./db/data*" --exclude="./tmp*" --exclude="./vendor*" --exclude="./coverage*" --exclude="./log*" --exclude="./tag*" --exclude="./spec*/cassett*" --exclude="./public/*.js*" --exclude="./.*" "$*" ./
}

function findd(){
  find . -ipath "*$**";
}

function superkill(){
  kill -9 `ps aux | grep $* | awk '{print $2}'`
}

function ,f() {
  vim $(git ls-files|selecta)
}

function ffiles() {
  find . -name \* -print | selecta
}
